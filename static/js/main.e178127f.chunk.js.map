{"version":3,"sources":["components/Button.js","components/Row.js","components/Intro.js","components/Layout.js","components/NextBack.js","components/SelectNumbers.js","components/SetJackpot.js","pages/Home.js","components/AdditionalNumber.js","utils/numberWithCommas.js","components/GroupOnePrize.js","static/img/toto.png","components/NextDraw.js","components/ReturnHome.js","components/TableHeader.js","components/WinningNumbers.js","components/WinningShares.js","pages/Simulation.js","App.js","reportWebVitals.js","index.js"],"names":["Button","props","children","onClick","className","Row","Intro","setShowSelectWinning","Layout","NextBack","showThis","showNext","showBack","validation","error","alert","SelectNumbers","title","numbers","setNumbers","maxSelection","allNumbers","i","push","map","number","selected","includes","e","numbersCopy","length","splice","currentTarget","classList","toggle","selectNumber","SetJackpot","jackpot","setJackpot","type","aria-label","value","onChange","event","target","test","Number","isInteger","parseInt","createQueryString","addNum","query","forEach","index","concat","Home","useState","showIntro","setShowIntro","showSelectWinning","showSelectAdd","setShowSelectAdd","showSetJackpot","setShowSetJackpot","showSimulation","setShowSimulation","winningNumbers","setWinningNumbers","additionalNumber","setAdditionalNumber","timeout","CSSTransition","in","appear","enter","exit","mountOnEnter","unmountOnExit","classNames","onEnter","to","pathname","search","AdditionalNumber","numberWithCommas","x","toString","replace","GroupOnePrize","NextDraw","datetime","Date","now","src","totoLogo","alt","toDateString","ReturnHome","TableHeader","WinningNumbers","WinningShares","winningShares","group","shareAmount","shares","colSpan","share","Simulation","URLSearchParams","useLocation","get","ScrollToTop","useEffect","window","scrollTo","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e178127f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Button = (props) => {\r\n    const { children, onClick } = props;\r\n\r\n    return (\r\n        <button className=\"btn btn-pri rounded-0\" onClick={onClick}>\r\n            {children}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\n\r\nconst Row = ({ children }) => {\r\n    return <div className=\"row my-3 justify-content-center\">{children}</div>;\r\n};\r\n\r\nexport default Row;\r\n","import React from \"react\";\r\nimport Button from \"./Button\";\r\nimport Row from \"./Row\";\r\n\r\nconst Intro = (props) => {\r\n    const { setShowSelectWinning } = props;\r\n\r\n    return (\r\n        <Row>\r\n            <div className=\"col-10\">\r\n                <h1 className=\"display-2 text-center\">Fake Toto</h1>\r\n                <p className=\"text-center\">\r\n                    This is a prank website to prank your family and friends\r\n                    <br />\r\n                    <br /> Select your winning numbers and select generate to\r\n                    watch the website simulate a real toto draw\r\n                    <br />\r\n                    <br />\r\n                    This website is in no way affiliated with Singapore Pools\r\n                    Limited.\r\n                </p>\r\n            </div>\r\n            <div className=\"col-3 d-flex justify-content-center\">\r\n                <Button onClick={() => setShowSelectWinning(true)}>\r\n                    Start\r\n                </Button>\r\n            </div>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default Intro;\r\n","import React from \"react\";\r\n\r\nconst Layout = ({ children }) => {\r\n    return (\r\n        <div className=\"container d-flex flex-column justify-content-center align-items-center\">\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Layout;\r\n","import React from \"react\";\r\nimport Button from \"./Button\";\r\n\r\nconst NextBack = (props) => {\r\n    const { showThis, showNext, showBack, validation } = props;\r\n\r\n    const next = () => {\r\n        if (validation().error) {\r\n            alert(validation().error);\r\n            return;\r\n        }\r\n        showThis(false);\r\n        showNext(true);\r\n    };\r\n\r\n    const back = () => {\r\n        showThis(false);\r\n        showBack(true);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"col-3 d-flex justify-content-center\">\r\n                <Button onClick={back}>Back</Button>\r\n            </div>\r\n            <div className=\"col-3 d-flex justify-content-center\">\r\n                <Button onClick={next}>Next</Button>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NextBack;\r\n","import React from \"react\";\r\nimport Button from \"./Button\";\r\nimport NextBack from \"./NextBack\";\r\n\r\nconst SelectNumbers = (props) => {\r\n    const {\r\n        title,\r\n        numbers,\r\n        setNumbers,\r\n        maxSelection,\r\n        showBack,\r\n        showNext,\r\n        showThis,\r\n    } = props;\r\n\r\n    // Create numbers from 1 to 49 in an array\r\n    const allNumbers = [];\r\n    for (var i = 1; i < 50; i++) {\r\n        allNumbers.push(i);\r\n    }\r\n\r\n    const selectNumber = (number, e) => {\r\n        var numbersCopy = [...numbers];\r\n\r\n        // Checks if the number is already selected\r\n        for (var i = 0; i < numbersCopy.length; i++) {\r\n            // If the number is selected, this action unselects it\r\n            if (numbersCopy[i] === number) {\r\n                numbersCopy.splice(i, 1);\r\n                setNumbers(numbersCopy);\r\n\r\n                e.currentTarget.classList.toggle(\"selected\");\r\n                return;\r\n            }\r\n        }\r\n\r\n        // Checks if the maximum number of numbers have been selected already\r\n        if (numbers.length === maxSelection) {\r\n            alert(`You can only select ${maxSelection} ${title}`);\r\n            return;\r\n        }\r\n\r\n        // Otherwise select the number\r\n        e.currentTarget.classList.toggle(\"selected\");\r\n        setNumbers([...numbers, number]);\r\n    };\r\n\r\n    const validation = () => {\r\n        if (numbers.length !== maxSelection) {\r\n            return { error: `Please select ${maxSelection} numbers` };\r\n        } else {\r\n            return {};\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"row my-3 justify-content-center\">\r\n            <div className=\"col-12 text-center\">\r\n                <h6>\r\n                    Select {maxSelection} {title}\r\n                </h6>\r\n            </div>\r\n            <div className=\"col-12\">\r\n                <div className=\"row\">\r\n                    {allNumbers.map((number) => {\r\n                        // Ensures that the selected numbers are highlighted to the user\r\n                        const selected = numbers.includes(number);\r\n\r\n                        return (\r\n                            <div\r\n                                key={number}\r\n                                className={`col-2 d-flex justify-content-center ${\r\n                                    selected && \"selected\"\r\n                                }`}\r\n                                onClick={(e) => selectNumber(number, e)}\r\n                            >\r\n                                <button className=\"btn\">{number}</button>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <NextBack\r\n                showThis={showThis}\r\n                showNext={showNext}\r\n                showBack={showBack}\r\n                validation={validation}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SelectNumbers;\r\n","import React from \"react\";\r\nimport NextBack from \"./NextBack\";\r\n\r\nconst SetJackpot = (props) => {\r\n    const { jackpot, setJackpot, showThis, showNext, showBack } = props;\r\n\r\n    const handleInputChange = (event) => {\r\n        const re = /^[0-9\\b]+$/;\r\n        if (event.target.value === \"\" || re.test(event.target.value)) {\r\n            setJackpot(event.target.value);\r\n        }\r\n    };\r\n\r\n    const validation = () => {\r\n        if (!jackpot) {\r\n            return { error: \"Please do not leave this blank\" };\r\n        } else if (!Number.isInteger(parseInt(jackpot))) {\r\n            return { error: \"Only numbers are allowed\" };\r\n        } else {\r\n            return {};\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"row my-3 justify-content-center\">\r\n            <div className=\"col-12 text-center\">\r\n                <h6>Enter the Group 1 jackpot for today</h6>\r\n            </div>\r\n            <div className=\"col-10\">\r\n                <div className=\"input-group mb-3\">\r\n                    <span className=\"input-group-text rounded-0\">$</span>\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"form-control rounded-0\"\r\n                        aria-label=\"Amount (to the nearest dollar)\"\r\n                        value={jackpot}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <NextBack\r\n                showThis={showThis}\r\n                showNext={showNext}\r\n                showBack={showBack}\r\n                validation={validation}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SetJackpot;\r\n","import React, { useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport Intro from \"../components/Intro\";\r\nimport Layout from \"../components/Layout\";\r\nimport SelectNumbers from \"../components/SelectNumbers\";\r\nimport SetJackpot from \"../components/SetJackpot\";\r\n\r\nconst Home = () => {\r\n    //States to control rendering of components\r\n    const [showIntro, setShowIntro] = useState(true);\r\n    const [showSelectWinning, setShowSelectWinning] = useState(false);\r\n    const [showSelectAdd, setShowSelectAdd] = useState(false);\r\n    const [showSetJackpot, setShowSetJackpot] = useState(false);\r\n    const [showSimulation, setShowSimulation] = useState(false);\r\n\r\n    const [winningNumbers, setWinningNumbers] = useState([]);\r\n    const [additionalNumber, setAdditionalNumber] = useState([]);\r\n    const [jackpot, setJackpot] = useState(\"\");\r\n\r\n    const timeout = 1000;\r\n\r\n    return (\r\n        <Layout>\r\n            <CSSTransition\r\n                in={showIntro}\r\n                appear={true}\r\n                timeout={{\r\n                    appear: 1000,\r\n                    enter: 1000,\r\n                    exit: 0,\r\n                }}\r\n                mountOnEnter\r\n                unmountOnExit\r\n                classNames=\"transition\"\r\n            >\r\n                <Intro setShowSelectWinning={setShowSelectWinning} />\r\n            </CSSTransition>\r\n            <CSSTransition\r\n                in={showSelectWinning}\r\n                timeout={{\r\n                    appear: timeout,\r\n                    enter: timeout,\r\n                    exit: 0,\r\n                }}\r\n                mountOnEnter\r\n                unmountOnExit\r\n                classNames=\"transition\"\r\n                onEnter={() => setShowIntro(false)}\r\n            >\r\n                <SelectNumbers\r\n                    title=\"Winning Numbers\"\r\n                    numbers={winningNumbers}\r\n                    setNumbers={setWinningNumbers}\r\n                    maxSelection={6}\r\n                    showNext={setShowSelectAdd}\r\n                    showBack={setShowIntro}\r\n                    showThis={setShowSelectWinning}\r\n                />\r\n            </CSSTransition>\r\n            <CSSTransition\r\n                in={showSelectAdd}\r\n                timeout={{\r\n                    appear: timeout,\r\n                    enter: timeout,\r\n                    exit: 0,\r\n                }}\r\n                mountOnEnter\r\n                unmountOnExit\r\n                classNames=\"transition\"\r\n                onEnter={() => setShowSelectWinning(false)}\r\n            >\r\n                <SelectNumbers\r\n                    title=\"Additional Number\"\r\n                    numbers={additionalNumber}\r\n                    setNumbers={setAdditionalNumber}\r\n                    maxSelection={1}\r\n                    showNext={setShowSetJackpot}\r\n                    showBack={setShowSelectWinning}\r\n                    showThis={setShowSelectAdd}\r\n                />\r\n            </CSSTransition>\r\n            <CSSTransition\r\n                in={showSetJackpot}\r\n                timeout={{\r\n                    appear: timeout,\r\n                    enter: timeout,\r\n                    exit: 0,\r\n                }}\r\n                mountOnEnter\r\n                unmountOnExit\r\n                classNames=\"transition\"\r\n            >\r\n                <SetJackpot\r\n                    jackpot={jackpot}\r\n                    setJackpot={setJackpot}\r\n                    showThis={setShowSetJackpot}\r\n                    showBack={setShowSelectAdd}\r\n                    showNext={setShowSimulation}\r\n                />\r\n            </CSSTransition>\r\n            <CSSTransition\r\n                in={showSimulation}\r\n                timeout={{\r\n                    appear: timeout,\r\n                    enter: timeout,\r\n                    exit: 0,\r\n                }}\r\n                mountOnEnter\r\n                unmountOnExit\r\n                classNames=\"transition\"\r\n            >\r\n                <Redirect\r\n                    push\r\n                    to={{\r\n                        pathname: \"/simulation\",\r\n                        search: createQueryString(\r\n                            winningNumbers,\r\n                            additionalNumber,\r\n                            jackpot\r\n                        ),\r\n                    }}\r\n                />\r\n            </CSSTransition>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nconst createQueryString = (numbers, addNum, jackpot) => {\r\n    var query = \"?\";\r\n\r\n    // Iterate through winning numbers\r\n    numbers.forEach((number, index) => {\r\n        query = query.concat(`num${index}=${number}&`);\r\n    });\r\n\r\n    // Concat the additional number and jackpot\r\n    query = query.concat(`addNum=${addNum}&jackpot=${jackpot}`);\r\n\r\n    // Return queryString\r\n    return query;\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\n\r\nconst AdditionalNumber = (props) => {\r\n    const { additionalNumber } = props;\r\n    return (\r\n        <div className=\"row mt-3\">\r\n            <div className=\"col-12 grey-table\">\r\n                <p className=\"my-0 text-center p-2\">Additional Number</p>\r\n            </div>\r\n            <div className=\"col-12 light-grey-table\">\r\n                <p className=\"text-center my-0 py-2\">{additionalNumber}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AdditionalNumber;\r\n","export default function numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n","import React from \"react\";\r\nimport numberWithCommas from \"../utils/numberWithCommas\";\r\n\r\nconst GroupOnePrize = (props) => {\r\n    const { jackpot } = props;\r\n\r\n    return (\r\n        <div className=\"row mt-3\">\r\n            <div className=\"col-12 grey-table\">\r\n                <p className=\"my-0 text-center p-2\">Group 1 Prize</p>\r\n            </div>\r\n            <div className=\"col-12 light-grey-table\">\r\n                <p className=\"text-center my-0 py-2\">\r\n                    ${numberWithCommas(jackpot)}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GroupOnePrize;\r\n","export default __webpack_public_path__ + \"static/media/toto.1a58eb76.png\";","import React from \"react\";\r\nimport totoLogo from \"../static/img/toto.png\";\r\nimport numberWithCommas from \"../utils/numberWithCommas\";\r\n\r\nconst NextDraw = (props) => {\r\n    const { jackpot } = props;\r\n\r\n    const datetime = new Date(Date.now());\r\n\r\n    return (\r\n        <div className=\"col-12\">\r\n            <div className=\"row\">\r\n                <div className=\"col-3 d-flex justify-content-center align-items-center\">\r\n                    <img src={totoLogo} alt=\"Toto Logo\" className=\"img-fluid\" />\r\n                </div>\r\n                <div className=\"col-9\">\r\n                    <div className=\"row align-items-center h-100\">\r\n                        <div className=\"col-5 d-flex flex-column justify-content-center py-3\">\r\n                            <p className=\"my-0\">Next Jackpot</p>\r\n                            <p className=\"my-0\">Next Draw</p>\r\n                        </div>\r\n                        <div className=\"col-7 d-flex flex-column justify-content-center py-3\">\r\n                            <p className=\"my-0\">\r\n                                ${numberWithCommas(jackpot)} est\r\n                            </p>\r\n                            <p className=\"my-0\"> {datetime.toDateString()}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NextDraw;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Button from \"./Button\";\r\n\r\nconst ReturnHome = (props) => {\r\n    return (\r\n        <div className=\"col-5 d-flex justify-content-center\">\r\n            <Button>\r\n                <Link to=\"/\">Back</Link>\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ReturnHome;\r\n","import React from \"react\";\r\n\r\nconst TableHeader = () => {\r\n    const datetime = new Date(Date.now());\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-6 table-header border border-end border-white\">\r\n                <p className=\"text-center text-white my-0 py-2\">\r\n                    {datetime.toDateString()}\r\n                </p>\r\n            </div>\r\n            <div className=\"col-6 table-header border border-start border-white\">\r\n                <p className=\"text-center text-white my-0 py-2\">\r\n                    Draw No. 3888\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TableHeader;\r\n","import React from \"react\";\r\n\r\nconst WinningNumbers = (props) => {\r\n    const { winningNumbers } = props;\r\n    return (\r\n        <div className=\"row mt-3\">\r\n            <div className=\"col-12 grey-table\">\r\n                <p className=\"my-0 text-center p-2\">Winning Numbers</p>\r\n            </div>\r\n            {winningNumbers.map((number) => {\r\n                return (\r\n                    <div className=\"col-2 light-grey-table\" key={number}>\r\n                        <p className=\"text-center my-0 py-2\">{number}</p>\r\n                    </div>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WinningNumbers;\r\n","import React from \"react\";\r\nimport numberWithCommas from \"../utils/numberWithCommas\";\r\n\r\nconst WinningShares = (props) => {\r\n    const { jackpot } = props;\r\n\r\n    const winningShares = [\r\n        {\r\n            group: 1,\r\n            shareAmount: jackpot,\r\n            shares: 1,\r\n        },\r\n        {\r\n            group: 2,\r\n            shareAmount: 188888,\r\n            shares: 8,\r\n        },\r\n        {\r\n            group: 3,\r\n            shareAmount: 1388,\r\n            shares: 568,\r\n        },\r\n        {\r\n            group: 4,\r\n            shareAmount: 388,\r\n            shares: 1288,\r\n        },\r\n        {\r\n            group: 5,\r\n            shareAmount: 50,\r\n            shares: 30888,\r\n        },\r\n        {\r\n            group: 6,\r\n            shareAmount: 25,\r\n            shares: 33688,\r\n        },\r\n        {\r\n            group: 7,\r\n            shareAmount: 10,\r\n            shares: 588888,\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <div className=\"row mt-3\">\r\n            <div className=\"col-12 p-0\">\r\n                <table className=\"table table-bordered text-center\">\r\n                    <thead className=\"grey-table\">\r\n                        <tr>\r\n                            <th colSpan={3}>Winning Shares</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>Prize Group</th>\r\n                            <th>Share Amount</th>\r\n                            <th>No. of Winning Shares</th>\r\n                        </tr>\r\n                        {winningShares.map((share) => {\r\n                            return (\r\n                                <tr key={share.group}>\r\n                                    <td>Group {share.group}</td>\r\n                                    <td>\r\n                                        ${numberWithCommas(share.shareAmount)}\r\n                                    </td>\r\n                                    <td>{numberWithCommas(share.shares)}</td>\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WinningShares;\r\n","import { useLocation } from \"react-router-dom\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport AdditionalNumber from \"../components/AdditionalNumber\";\r\nimport GroupOnePrize from \"../components/GroupOnePrize\";\r\nimport Layout from \"../components/Layout\";\r\nimport NextDraw from \"../components/NextDraw\";\r\nimport ReturnHome from \"../components/ReturnHome\";\r\nimport Row from \"../components/Row\";\r\nimport TableHeader from \"../components/TableHeader\";\r\nimport WinningNumbers from \"../components/WinningNumbers\";\r\nimport WinningShares from \"../components/WinningShares\";\r\n\r\n// A custom hook that builds on useLocation to parse\r\n// the query string for you.\r\nfunction useQuery() {\r\n    return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nconst Simulation = () => {\r\n    const query = useQuery();\r\n\r\n    // Get data from winning string\r\n    const winningNumbers = [];\r\n    for (var i = 0; i < 6; i++) {\r\n        winningNumbers.push(query.get(`num${i}`));\r\n    }\r\n    const additionalNumber = [query.get(\"addNum\")];\r\n    const jackpot = query.get(\"jackpot\");\r\n\r\n    return (\r\n        <CSSTransition\r\n            in={true}\r\n            appear={true}\r\n            timeout={{\r\n                appear: 1000,\r\n                enter: 1000,\r\n                exit: 0,\r\n            }}\r\n            mountOnEnter\r\n            unmountOnExit\r\n            classNames=\"transition\"\r\n        >\r\n            <Layout>\r\n                <Row>\r\n                    <div className=\"col-12 col-md-6\">\r\n                        <div className=\"row justify-content-center\">\r\n                            <NextDraw jackpot={jackpot} />\r\n\r\n                            <div className=\"col-10\">\r\n                                <TableHeader />\r\n                                <WinningNumbers\r\n                                    winningNumbers={winningNumbers}\r\n                                />\r\n                                <AdditionalNumber\r\n                                    additionalNumber={additionalNumber}\r\n                                />\r\n                                <GroupOnePrize jackpot={jackpot} />\r\n                                <WinningShares jackpot={jackpot} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Row>\r\n                <Row>\r\n                    <ReturnHome />\r\n                </Row>\r\n            </Layout>\r\n        </CSSTransition>\r\n    );\r\n};\r\n\r\nexport default Simulation;\r\n","import React, { useEffect } from \"react\";\r\nimport {\r\n    HashRouter as Router,\r\n    Switch,\r\n    Route,\r\n    useLocation,\r\n} from \"react-router-dom\";\r\nimport styles from \"./App.css\";\r\nimport Home from \"./pages/Home\";\r\nimport Simulation from \"./pages/Simulation\";\r\n\r\nconst App = () => {\r\n    return (\r\n        <Router>\r\n            <ScrollToTop />\r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                    <Home />\r\n                </Route>\r\n                <Route path=\"/simulation\">\r\n                    <Simulation />\r\n                </Route>\r\n            </Switch>\r\n        </Router>\r\n    );\r\n};\r\n\r\nfunction ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return null;\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}